GULP:

EXEMPLOS:
importanto gulp de node modules
var gulp = require('gulp');

1 arg = nome da tarefa, 2 arg=callback
gulp.task('task1', function(){
	console.log('task 1 done');
})

gulp.task('task2', function(){
	console.log('task 2 done');
})

realiza todas as tasks
se o nome dela for default, basta digitar gulp
gulp.task('all', ['task1', 'task2']);

chamando plugins
var gulp = require('gulp');
var stylus = require('gulp-stylus');

gulp.task('stylus-task', function(){
	src le o arquivo, pipe cria uma pipeline, 
	stylus vai compilar o arquivo e vai salvar o arquivo atraves de dest, numa pasta build
	gulp.src('stylus/style.styl')
		.pipe(stylus({
			minificado true
			compress: true
		}))
		.pipe(gulp.dest('build'))
});

_________________________________________________________________________________________________________

JS (es6):

ARROW FUNCTION:

var nome = () => {
	console.log('caio');
}

quando a ação é somente em uma linha não é preciso o uso das chaves, exemplo:
var nome = x => console.log(x); //x é o parametro da função

quando se usa return, não precisa usar a palavra return, exemplo:
var nome = x => x //retorna-se o parametro x
_________________________________________________________________________________________________________

LET E CONST:

let protege uma varivel dentro de um escopo especifico, exemplo:
if (5>4){
	let foo = 'bar';
	var bar = 'foo';
}

console.log(foo) // o retorno é undefined
console.log(bar) // o retorno é foo

const é uma constante, algo que nao se altera o valor, exemplo:
const cor = 'azul';
cor = 'preto';

console.log(cor); // o retorno será um erro dizendo que nao pode trocar o valor de uma const
_________________________________________________________________________________________________________

CLASS E HERANÇA:
//classes nao funcionam com hosting, primeiro é preciso criar a classe, para depois usa-la

class Pokemon {
	//o constructor inicia objeto, determina quais as propriedades do objeto
	constructor(pow) {
		//criando a propriedade power e atribuindo o valor do parametro p
		this.power = pow;
	}

	//cria um metodo, quando cria-se um metodo com static na definicao, ele só funciona quando chama direto da classe, exemplo: Pokemon.atk(), inves de pikachu.atk()
	atk(){
		return 'Use o poder '+pow;
	}


	get superAtk(){
		return this.atk();
	}
}

//instancia um pokemon, e passa thunder como seu poder
const pikachu = new Pokemon('thunder');

//usa o metodo de ataque
pikachu.atk();

// usando o get o metodo pode ser chamado como propriedade inves de metodo
pikachu.superatk;


//usando herança
class Pikachu extends Pokemon {
	constructor(def) {
		//super serve para funcionar corretamente a herança de propriedades, e metodos
		super();
		this.defense = def;
	}
}

// o poke pega tudo de Pokemon, mais as suas propriedades setadas no seu constructor
const poke = new Pikachu('500');
